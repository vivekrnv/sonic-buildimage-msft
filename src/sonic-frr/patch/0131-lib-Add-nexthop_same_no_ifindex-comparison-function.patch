From fec4e109e3d90bf150306f1dec372471bad66706 Mon Sep 17 00:00:00 2001
From: Donald Sharp <sharpd@nvidia.com>
Date: Thu, 1 May 2025 12:21:30 -0400
Subject: [PATCH] lib: Add nexthop_same_no_ifindex comparison function

Add a nexthop_same_no_ifindex comparison function to
allow nexthops to be compared without looking at the
outgoing ifindex.  This is because sometimes it is
not possible to resolve a nh to a ifindex when
zebra receives it and we need the ability to compare
them then.

Signed-off-by: Donald Sharp <sharpd@nvidia.com>
---
 lib/nexthop.c | 28 ++++++++++++++++++++++------
 lib/nexthop.h |  1 +
 2 files changed, 23 insertions(+), 6 deletions(-)
 
diff --git a/lib/nexthop.c b/lib/nexthop.c
index dfa3c3a55c..d83f63f96c 100644
--- a/lib/nexthop.c
+++ b/lib/nexthop.c
@@ -139,7 +139,7 @@ static int _nexthop_source_cmp(const struct nexthop *nh1,
 }
 
 static int _nexthop_cmp_no_labels(const struct nexthop *next1,
-				  const struct nexthop *next2, bool use_weight)
+				  const struct nexthop *next2, bool use_weight, bool use_ifindex)
 {
 	int ret = 0;
 
@@ -175,6 +175,8 @@ static int _nexthop_cmp_no_labels(const struct nexthop *next1,
 		ret = _nexthop_gateway_cmp(next1, next2);
 		if (ret != 0)
 			return ret;
+		if (!use_ifindex)
+			break;
 		fallthrough;
 	case NEXTHOP_TYPE_IFINDEX:
 		if (next1->ifindex < next2->ifindex)
@@ -230,11 +232,11 @@ done:
 }
 
 static int nexthop_cmp_internal(const struct nexthop *next1,
-				const struct nexthop *next2, bool use_weight)
+				const struct nexthop *next2, bool use_weight, bool use_ifindex)
 {
 	int ret = 0;
 
-	ret = _nexthop_cmp_no_labels(next1, next2, use_weight);
+	ret = _nexthop_cmp_no_labels(next1, next2, use_weight, use_ifindex);
 	if (ret != 0)
 		return ret;
 
@@ -249,13 +251,13 @@ static int nexthop_cmp_internal(const struct nexthop *next1,
 
 int nexthop_cmp(const struct nexthop *next1, const struct nexthop *next2)
 {
-	return nexthop_cmp_internal(next1, next2, true);
+	return nexthop_cmp_internal(next1, next2, true, true);
 }
 
 int nexthop_cmp_no_weight(const struct nexthop *next1,
 			  const struct nexthop *next2)
 {
-	return nexthop_cmp_internal(next1, next2, false);
+	return nexthop_cmp_internal(next1, next2, false, true);
 }
 
 /*
@@ -426,6 +428,20 @@ void nexthops_free(struct nexthop *nexthop)
 	}
 }
 
+bool nexthop_same_no_ifindex(const struct nexthop *nh1, const struct nexthop *nh2)
+{
+	if (nh1 && !nh2)
+		return false;
+
+	if (!nh1 && nh2)
+		return false;
+
+	if (nh1 == nh2)
+		return true;
+
+	return nexthop_cmp_internal(nh1, nh2, true, false);
+}
+
 bool nexthop_same(const struct nexthop *nh1, const struct nexthop *nh2)
 {
 	if (nh1 && !nh2)
@@ -455,7 +471,7 @@ bool nexthop_same_no_labels(const struct nexthop *nh1,
 	if (nh1 == nh2)
 		return true;
 
-	if (_nexthop_cmp_no_labels(nh1, nh2, true) != 0)
+	if (_nexthop_cmp_no_labels(nh1, nh2, true, true) != 0)
 		return false;
 
 	return true;
diff --git a/lib/nexthop.h b/lib/nexthop.h
index c8492f91f7..4715c2215c 100644
--- a/lib/nexthop.h
+++ b/lib/nexthop.h
@@ -209,6 +209,7 @@ uint32_t nexthop_hash(const struct nexthop *nexthop);
 uint32_t nexthop_hash_quick(const struct nexthop *nexthop);
 
 extern bool nexthop_same(const struct nexthop *nh1, const struct nexthop *nh2);
+extern bool nexthop_same_no_ifindex(const struct nexthop *nh1, const struct nexthop *nh2);
 extern bool nexthop_same_no_labels(const struct nexthop *nh1,
 				   const struct nexthop *nh2);
 extern int nexthop_cmp(const struct nexthop *nh1, const struct nexthop *nh2);
