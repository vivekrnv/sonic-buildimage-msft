From ee73ade5a7a66c25d2efbe29a37273e24628079a Mon Sep 17 00:00:00 2001
From: Donald Sharp <sharpd@nvidia.com>
Date: Thu, 24 Apr 2025 14:45:14 -0400
Subject: [PATCH] zebra: Allow nhg's to be reused when multiple interfaces are
 going amuck

Currently if there are multiple interfaces going down it is possible
to have a ships in the night situation with trying to reuse a nhg.

Imagine that you have a route w/ 4 way ecmp
  nexthop A interface a
  nexthop B interface b
  nexthop C interface c
  nexthop D interface d

Suppose interface a goes down, zebra receives this data
marks singleton nexthop A down and then recurses up the
tree to the 4 way ecmp and sets nexthop A as inactive.
Zebra then will notify the upper level protocol.

The upper level protocol will refigure the route and send
it down with 3 way ecmp.  At the same time if interface
b goes down and zebra handles that interface down event
before the new route installation, then when
zebra_nhg_rib_compare_old_nhe is called it will not
match the old and new ones up as that the old will be:

  nexthop A  <inactive>
  nexthop B  <inactive>
  nexthop C
  nexthop D

New will be:

   nexthop B  <inactive>
   nexthop C
   nexthop D

Currently zebra_nhg_nexthop_compare on the old skips all
the inactive but it never skips the nexthops at are inactive
on the new.

Modify the code to allow the new nhop to be skipped if it
is the same nexthop being looked at as the old and it
is not active as well.  This allows zebra to choose
the same nhg in the above case to continue working.

Signed-off-by: Donald Sharp <sharpd@nvidia.com>
---
 zebra/zebra_nhg.c | 20 +++++++++++++++++---
 1 file changed, 17 insertions(+), 3 deletions(-)

diff --git a/zebra/zebra_nhg.c b/zebra/zebra_nhg.c
index 51ae6493a..99750b3db 100644
--- a/zebra/zebra_nhg.c
+++ b/zebra/zebra_nhg.c
@@ -2933,13 +2933,27 @@ static bool zebra_nhg_nexthop_compare(const struct nexthop *nhop,
 
 	while (nhop && old_nhop) {
 		if (IS_ZEBRA_DEBUG_NHG_DETAIL)
-			zlog_debug("%s: %pRN Comparing %pNHvv(%u) to old: %pNHvv(%u)",
-				   __func__, rn, nhop, nhop->flags, old_nhop,
-				   old_nhop->flags);
+			zlog_debug("%s: %pRN Comparing %pNHvv(%u) ACTIVE: %d to old: %pNHvv(%u) ACTIVE: %d nexthop same: %d",
+				   __func__, rn, nhop, nhop->flags,
+				   CHECK_FLAG(nhop->flags, NEXTHOP_FLAG_ACTIVE), old_nhop,
+				   old_nhop->flags, CHECK_FLAG(old_nhop->flags, NEXTHOP_FLAG_ACTIVE),
+				   nexthop_same_no_ifindex(nhop, old_nhop));
 		if (!CHECK_FLAG(old_nhop->flags, NEXTHOP_FLAG_ACTIVE)) {
 			if (IS_ZEBRA_DEBUG_NHG_DETAIL)
 				zlog_debug("%s: %pRN Old is not active going to the next one",
 					   __func__, rn);
+
+			/*
+			 * If the new nexthop is not active and the old nexthop is also not active,
+			 * then we know that we can skip both the old and new nexthops.
+			 */
+			if (!CHECK_FLAG(nhop->flags, NEXTHOP_FLAG_ACTIVE) &&
+			    nexthop_same_no_ifindex(nhop, old_nhop)) {
+				if (IS_ZEBRA_DEBUG_NHG_DETAIL)
+					zlog_debug("%s: %pRN new is not active going to the next one",
+						   __func__, rn);
+				nhop = nhop->next;
+			}
 			old_nhop = old_nhop->next;
 			continue;
 		}
-- 
2.39.5

