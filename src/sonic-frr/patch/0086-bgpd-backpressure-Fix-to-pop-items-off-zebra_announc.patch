commit 324b04f08122306c460217a02eb2439b1de6b9dc
Author: vkarri <vkarri@contoso.com>
Date:   Wed Apr 2 23:35:37 2025 +0000

    bgpd : backpressure - Fix to pop items off zebra_announce FIFO for few EVPN triggers
    
    In cases such as 'no advertise-all-vni' and L2 VNI DELETE, we need to
    pop all the VPN routes present in the bgp_zebra_announce FIFO yet to
    be processed regardless of VNI is configured or not.
    
    NOTE: NO need to pop the VPN routes in two cases
     1) In free_vni_entry
       - Called by bgp_free()->bgp_evpn_cleanup().
       - Since bgp_delete is called before bgp_free and we pop all the dest
         pertaining to bgp under delete.
     2) evpn_delete_vni() when user configures "no vni" since the withdraw
        of all routes happen in normal cycle.
    
    Fixes: a07df6f7548f6bd1b92acbb7a10c3823de33fe5f
    ("bgpd : backpressure - Handle BGP-Zebra(EPVN) Install evt Creation")
    
    Ticket :#4163611
    
    Signed-off-by: Rajasekar Raja <rajasekarr@nvidia.com>

diff --git a/bgpd/bgp_evpn.c b/bgpd/bgp_evpn.c
index cb51023a45..f0c93d5c37 100644
--- a/bgpd/bgp_evpn.c
+++ b/bgpd/bgp_evpn.c
@@ -5077,6 +5077,33 @@ void evpn_mpattr_encode_type5(struct stream *s, const struct prefix *p,
 		stream_put3(s, 0);
 }
 
+/*
+ * In cases such as 'no advertise-all-vni' and L2 VNI DELETE, we need to
+ * pop all the VPN routes present in the bgp_zebra_announce FIFO yet to
+ * be processed regardless of VNI is configured or not.
+ *
+ * NOTE: NO need to pop the VPN routes in two cases
+ *  1) In free_vni_entry
+ *     - Called by bgp_free()->bgp_evpn_cleanup().
+ *     - Since bgp_delete is called before bgp_free and we pop all the dest
+ *       pertaining to bgp under delete.
+ *  2) evpn_delete_vni() when user configures "no vni" since the withdraw
+ *     of all routes happen in normal cycle.
+ */
+void bgp_zebra_evpn_pop_items_from_announce_fifo(struct bgpevpn *vpn)
+{
+	struct bgp_dest *dest = NULL;
+	struct bgp_dest *dest_next = NULL;
+
+	for (dest = zebra_announce_first(&bm->zebra_announce_head); dest; dest = dest_next) {
+		dest_next = zebra_announce_next(&bm->zebra_announce_head, dest);
+		if (dest->za_vpn == vpn) {
+			zebra_announce_del(&bm->zebra_announce_head, dest);
+			bgp_path_info_unlock(dest->za_bgp_pi);
+			bgp_dest_unlock_node(dest);
+		}
+	}
+}
 /*
  * Cleanup specific VNI upon EVPN (advertise-all-vni) being disabled.
  */
@@ -5089,6 +5116,8 @@ void cleanup_vni_on_disable(struct hash_bucket *bucket, struct bgp *bgp)
 
 	/* Clear "live" flag and see if hash needs to be freed. */
 	UNSET_FLAG(vpn->flags, VNI_FLAG_LIVE);
+	/* Pop items from bgp_zebra_announce FIFO for any VPN routes pending*/
+	bgp_zebra_evpn_pop_items_from_announce_fifo(vpn);
 	if (!is_vni_configured(vpn))
 		bgp_evpn_free(bgp, vpn);
 }
@@ -6320,18 +6349,6 @@ struct bgpevpn *bgp_evpn_new(struct bgp *bgp, vni_t vni,
  */
 void bgp_evpn_free(struct bgp *bgp, struct bgpevpn *vpn)
 {
-	struct bgp_dest *dest = NULL;
-	struct bgp_dest *dest_next = NULL;
-
-	for (dest = zebra_announce_first(&bm->zebra_announce_head); dest;
-	     dest = dest_next) {
-		dest_next = zebra_announce_next(&bm->zebra_announce_head, dest);
-		if (dest->za_vpn == vpn) {
-			zebra_announce_del(&bm->zebra_announce_head, dest);
-			bgp_path_info_unlock(dest->za_bgp_pi);
-			bgp_dest_unlock_node(dest);
-		}
-	}
 	bgp_evpn_remote_ip_hash_destroy(vpn);
 	bgp_evpn_vni_es_cleanup(vpn);
 	bgpevpn_unlink_from_l3vni(vpn);
@@ -7001,6 +7018,8 @@ int bgp_evpn_local_vni_del(struct bgp *bgp, vni_t vni)
 
 	/* Clear "live" flag and see if hash needs to be freed. */
 	UNSET_FLAG(vpn->flags, VNI_FLAG_LIVE);
+	/* Pop items from bgp_zebra_announce FIFO for any VPN routes pending*/
+	bgp_zebra_evpn_pop_items_from_announce_fifo(vpn);
 	if (!is_vni_configured(vpn))
 		bgp_evpn_free(bgp, vpn);
 
@@ -7853,4 +7872,4 @@ void bgp_aggr_supp_withdraw_from_evpn(struct bgp *bgp, afi_t afi, safi_t safi)
 		}
 	}
 	return;
-}
\ No newline at end of file
+}
diff --git a/bgpd/bgp_evpn.h b/bgpd/bgp_evpn.h
index db05293a43..0e25a9f267 100644
--- a/bgpd/bgp_evpn.h
+++ b/bgpd/bgp_evpn.h
@@ -193,5 +193,5 @@ extern bool is_route_injectable_into_evpn(struct bgp_path_info *pi);
 extern bool is_route_injectable_into_evpn_non_supp(struct bgp_path_info *pi);
 extern void bgp_aggr_supp_withdraw_from_evpn(struct bgp *bgp, afi_t afi,
 					     safi_t safi);
-
+extern void bgp_zebra_evpn_pop_items_from_announce_fifo(struct bgpevpn *vpn);
 #endif /* _QUAGGA_BGP_EVPN_H */
